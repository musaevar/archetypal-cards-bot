const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

const bot = new TelegramBot(token, { 
    polling: {
        interval: 1000,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
const DIALOG_STATES = {
    IDLE: 'idle',
    WAITING_FOR_STATE_DESCRIPTION: 'waiting_for_state',
    WAITING_FOR_METAPHOR: 'waiting_for_metaphor',
    WAITING_FOR_CARD1_RESPONSE: 'waiting_for_card1',
    WAITING_FOR_CARD2_RESPONSE: 'waiting_for_card2',
    WAITING_FOR_PSYCHOLOGICAL_ANALYSIS: 'waiting_for_analysis',
    WAITING_FOR_CARD3_RESPONSE: 'waiting_for_card3',
    WAITING_FOR_MEANING_CARD: 'waiting_for_meaning',
    COMPLETED: 'completed'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ –ª–∏–º–∏—Ç–∞ Telegram (1024 —Å–∏–º–≤–æ–ª–∞)
function truncateCaption(text, maxLength = 1000) {
    if (text.length <= maxLength) return text;
    
    const truncated = text.substring(0, maxLength);
    const lastParagraph = truncated.lastIndexOf('\n\n');
    
    if (lastParagraph > maxLength * 0.7) {
        return truncated.substring(0, lastParagraph) + '\n\n...';
    }
    
    return truncated + '...';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
async function sendTyping(chatId) {
    try {
        await bot.sendChatAction(chatId, 'typing');
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
async function sendProgressMessage(chatId, message, delay = 1000) {
    await sendTyping(chatId);
    await new Promise(resolve => setTimeout(resolve, delay));
    return await bot.sendMessage(chatId, message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
async function updateProgressMessage(chatId, messageId, newText) {
    try {
        await bot.editMessageText(newText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML'
        });
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ');
        return await bot.sendMessage(chatId, newText, { parse_mode: 'HTML' });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserSession(userId) {
    userSessions.set(userId, {
        state: DIALOG_STATES.IDLE,
        stateDescription: '',
        metaphor: '',
        card1Data: null,
        card2Data: null,
        card3Data: null,
        meaningCardData: null,
        card1Response: '',
        card2Response: '',
        card3Response: '',
        meaningResponse: '',
        psychologicalAnalysis: '',
        recommendations: '',
        lastActivity: Date.now()
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserSession(userId) {
    if (!userSessions.has(userId)) {
        initUserSession(userId);
    }
    return userSessions.get(userId);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
async function generateText(prompt, maxTokens = 500) {
    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4",
            messages: [
                {
                    role: "system",
                    content: "–¢—ã - –º—É–¥—Ä—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π –∏ –æ–±—Ä–∞–∑–Ω—ã–π —è–∑—ã–∫."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            max_tokens: maxTokens,
            temperature: 0.8
        });
        
        return completion.choices[0].message.content;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
async function generateImage(prompt) {
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ DALL-E —Å –ø—Ä–æ–º–ø—Ç–æ–º:', prompt);
        const response = await openai.images.generate({
            model: "dall-e-3",
            prompt: prompt,
            size: "1024x1024",
            quality: "standard",
            n: 1
        });
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DALL-E:', response.data[0]);
        return response.data[0].url;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function generateStateCard(stateDescription, metaphor) {
    const prompt = `–¢—ã ‚Äî –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫ –∏ UX-—Ä–µ–¥–∞–∫—Ç–æ—Ä.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–°–æ—Å—Ç–æ—è–Ω–∏–µ: "${stateDescription}"
–ú–µ—Ç–∞—Ñ–æ—Ä–∞: "${metaphor}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (2-3 –ø—É–Ω–∫—Ç–∞ —Å–æ —Å–º–∞–π–ª–∞–º–∏)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã —Å–æ —Å–º–∞–π–ª–∞–º–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal card representing ${stateDescription} in ${metaphor}`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üå´Ô∏è –¢—É–º–∞–Ω –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏\nüíî –¢—Ä–µ—â–∏–Ω—ã –≤ –¥—É—à–µ\nüåä –í–æ–ª–Ω—ã —ç–º–æ—Ü–∏–π'
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function generateResourceCard(stateDescription, metaphor) {
    const prompt = `–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç—É-—Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –µ–º—É –≤—ã–π—Ç–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "${stateDescription}"
–ú–µ—Ç–∞—Ñ–æ—Ä–∞: "${metaphor}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (2-3 –ø—É–Ω–∫—Ç–∞ —Å–æ —Å–º–∞–π–ª–∞–º–∏)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã —Å–æ —Å–º–∞–π–ª–∞–º–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal resource card for transition from ${stateDescription}`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üå± –†–æ—Å—Ç–æ–∫ –Ω–∞–¥–µ–∂–¥—ã\nüíé –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞\nüåü –ü—É—Ç–µ–≤–æ–¥–Ω–∞—è –∑–≤–µ–∑–¥–∞'
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async function generateTransitionCard(card1Data, card2Data, card1Response, card2Response) {
    const prompt = `–¢—ã ‚Äî –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å—É.

–ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${card1Data.description}
–û—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${card1Response}"

–ö–∞—Ä—Ç–∞ —Ä–µ—Å—É—Ä—Å–∞: ${card2Data.description}
–û—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${card2Response}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –º–æ—Å—Ç–∞ (2-3 –ø—É–Ω–∫—Ç–∞ —Å–æ —Å–º–∞–π–ª–∞–º–∏)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã –º–æ—Å—Ç–∞ —Å–æ —Å–º–∞–π–ª–∞–º–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal transition card bridging two states`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üåâ –ú–æ—Å—Ç –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏\nüïØÔ∏è –°–≤–µ—Ç –Ω–∞ –ø—É—Ç–∏\nüë£ –°–ª–µ–¥—ã —à–∞–≥–æ–≤'
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–º—ã—Å–ª–∞
async function generateMeaningCard(card1Data, card2Data, card3Data, allResponses) {
    const prompt = `–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –∞–≤—Ç–æ—Ä –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞ (—Ä–∞–¥–∏ —á–µ–≥–æ —Å–µ–π—á–∞—Å –¥–≤–∏–∂–µ–Ω–∏–µ).

–ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${card1Data.description}
–ö–∞—Ä—Ç–∞ —Ä–µ—Å—É—Ä—Å–∞: ${card2Data.description}
–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: ${card3Data.description}

–û—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${allResponses.join(', ')}

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–º—ã—Å–ª–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å–º—ã—Å–ª–∞ (2 –ø—É–Ω–∫—Ç–∞ —Å–æ —Å–º–∞–π–ª–∞–º–∏)
4. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å–º—ã—Å–ª–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–º—ã—Å–ª–∞ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã —Å–º—ã—Å–ª–∞ —Å–æ —Å–º–∞–π–ª–∞–º–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]
CONCLUSION: [–∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å–º—ã—Å–ª–µ]`;

    const response = await generateText(prompt, 600);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)(?=CONCLUSION:|$)/s);
    const conclusionMatch = response.match(/CONCLUSION:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal meaning card showing purpose and direction`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üéØ –¶–µ–ª—å –ø—É—Ç–∏\nüí´ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç',
        conclusion: conclusionMatch ? conclusionMatch[1].trim() : '–°–º—ã—Å–ª —Å–µ–π—á–∞—Å –¥–ª—è —Ç–µ–±—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫ —Å–µ–±–µ.'
    };
}

// –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
async function generatePsychologicalAnalysis(card1Data, card2Data, card1Response, card2Response) {
    const prompt = `–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä UX.
–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏—Ç–æ–≥ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç 1 –∏ 2, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${card1Data.description}
–û—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${card1Response}"

–ö–∞—Ä—Ç–∞ —Ä–µ—Å—É—Ä—Å–∞: ${card2Data.description}
–û—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${card2Response}"

–°–æ–∑–¥–∞–π:
1. 2-3 –∞–±–∑–∞—Ü–∞ –ø–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
2. –°–≤—è–∂–∏ —Å–∏–º–≤–æ–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ä–µ—Å—É—Ä—Å–∞ –≤ –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é
3. –î–æ–±–∞–≤—å 1 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é ("–Ω–∞–π–¥–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
ANALYSIS: [–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∫–∏]
RECOMMENDATION: [–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]`;

    const response = await generateText(prompt, 600);
    
    const analysisMatch = response.match(/ANALYSIS:\s*(.+?)(?=RECOMMENDATION:|$)/s);
    const recommendationMatch = response.match(/RECOMMENDATION:\s*(.+?)$/s);
    
    return {
        analysis: analysisMatch ? analysisMatch[1].trim() : response,
        recommendation: recommendationMatch ? recommendationMatch[1].trim() : '–ù–∞–π–¥–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–∞—Å—Ç —Ç–µ–±–µ –æ—â—É—â–µ–Ω–∏–µ –∂–∏–∑–Ω–∏.'
    };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
async function sendImageFromUrl(chatId, imageUrl, caption) {
    try {
        console.log('–°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL:', imageUrl);
        
        const response = await axios({
            method: 'GET',
            url: imageUrl,
            responseType: 'stream',
            timeout: 30000
        });
        
        const tempPath = path.join(__dirname, '..', 'temp', `image_${Date.now()}.png`);
        const tempDir = path.dirname(tempPath);
        
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        const writer = fs.createWriteStream(tempPath);
        response.data.pipe(writer);
        
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('Timeout –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
            }, 30000);
            
            writer.on('finish', async () => {
                clearTimeout(timeout);
                try {
                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram...');
                    
                    const shortCaption = truncateCaption(caption);
                    
                    await bot.sendPhoto(chatId, tempPath, { 
                        caption: shortCaption, 
                        parse_mode: 'HTML' 
                    });
                    
                    if (shortCaption !== caption) {
                        await bot.sendMessage(chatId, `üìù –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n\n${caption}`, {
                            parse_mode: 'HTML'
                        });
                    }
                    
                    fs.unlinkSync(tempPath);
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                    resolve();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    if (fs.existsSync(tempPath)) {
                        fs.unlinkSync(tempPath);
                    }
                    reject(error);
                }
            });
            
            writer.on('error', (error) => {
                clearTimeout(timeout);
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                reject(error);
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n\n${caption}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é`);
    
    initUserSession(userId);
    
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç üëã  
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –∏ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ã—Ö–æ–¥–∞.  

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—é? ‚ú®  
–ù–∞–ø–∏—à–∏ "–î–∞" –∏–ª–∏ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`;
    
    await bot.sendMessage(chatId, welcomeMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    
    if (!text || text.startsWith('/')) return;
    
    const session = getUserSession(userId);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.state}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    
    try {
        switch (session.state) {
            case DIALOG_STATES.IDLE:
                if (text.toLowerCase().includes('–¥–∞') || text.toLowerCase().includes('–Ω–∞—á–∞—Ç—å')) {
                    session.state = DIALOG_STATES.WAITING_FOR_STATE_DESCRIPTION;
                    await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! üåü

–û–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º-–¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π.  
–ù–∞–ø—Ä–∏–º–µ—Ä: "—è –ø–æ—Ç–µ—Ä—è–ª –ø—É—Ç—å", "–ø—É—Å—Ç–æ—Ç–∞", "—Ç—Ä–µ–≤–æ–≥–∞", "–∑–∞—Å—Ç—Ä—è–ª".`);
                } else {
                    await bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ "–î–∞" –∏–ª–∏ "–ù–∞—á–∞—Ç—å" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–∞–º–∏.`);
                }
                break;
                
            case DIALOG_STATES.WAITING_FOR_STATE_DESCRIPTION:
                session.stateDescription = text;
                session.state = DIALOG_STATES.WAITING_FOR_METAPHOR;
                
                await bot.sendMessage(chatId, `–ü–æ–Ω—è–ª, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å "${text}". 

–ï—Å–ª–∏ –±—ã —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –º–µ—Å—Ç–æ–º –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–æ–π ‚Äî —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?  
–õ–µ—Å, –ø—É—Å—Ç—ã–Ω—è, –º–æ—Ä–µ, —Ç—É–º–∞–Ω, –¥–æ–∂–¥—å?`);
                break;
                
            case DIALOG_STATES.WAITING_FOR_METAPHOR:
                session.metaphor = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç
                const initialMessage = await bot.sendMessage(chatId, `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã...</b>

–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É...');
                await updateProgressMessage(chatId, initialMessage.message_id, 
                    `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${session.stateDescription}" –≤ –æ–±—Ä–∞–∑–µ "${session.metaphor}"...`);
                
                const card1Data = await generateStateCard(session.stateDescription, session.metaphor);
                session.card1Data = card1Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ1:', card1Data);
                
                await updateProgressMessage(chatId, initialMessage.message_id, 
                    `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${session.stateDescription}" –≤ –æ–±—Ä–∞–∑–µ "${session.metaphor}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è...`);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ1...');
                const card1Image = await generateImage(card1Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ1:', card1Image);
                
                await updateProgressMessage(chatId, initialMessage.message_id, 
                    `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${session.stateDescription}" –≤ –æ–±—Ä–∞–∑–µ "${session.metaphor}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É...`);
                
                await sendImageFromUrl(chatId, card1Image, 
                    `üúÉ <b>–ö–∞—Ä—Ç–∞ ‚Ññ1 ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ</b>

${card1Data.description}

${card1Data.symbols}

<b>–ß—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Ç–µ–±–µ —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ?</b>`);
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, initialMessage.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD1_RESPONSE;
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD1_RESPONSE:
                session.card1Response = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
                const card2Message = await bot.sendMessage(chatId, `üå± <b>–°–æ–∑–¥–∞—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É ‚Äî —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É...');
                await updateProgressMessage(chatId, card2Message.message_id, 
                    `üå± <b>–°–æ–∑–¥–∞—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É ‚Äî —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "${session.stateDescription}"...`);
                
                const card2Data = await generateResourceCard(session.stateDescription, session.metaphor);
                session.card2Data = card2Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ2:', card2Data);
                
                await updateProgressMessage(chatId, card2Message.message_id, 
                    `üå± <b>–°–æ–∑–¥–∞—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É ‚Äî —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "${session.stateDescription}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è –∫–∞—Ä—Ç—ã —Ä–µ—Å—É—Ä—Å–∞...`);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ2...');
                const card2Image = await generateImage(card2Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ2:', card2Image);
                
                await updateProgressMessage(chatId, card2Message.message_id, 
                    `üå± <b>–°–æ–∑–¥–∞—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É ‚Äî —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "${session.stateDescription}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è –∫–∞—Ä—Ç—ã —Ä–µ—Å—É—Ä—Å–∞...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É...`);
                
                await sendImageFromUrl(chatId, card2Image, 
                    `üúÅ <b>–ö–∞—Ä—Ç–∞ ‚Ññ2 ‚Äî –†–µ—Å—É—Ä—Å</b>

${card2Data.description}

${card2Data.symbols}

<b>–ß—Ç–æ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è?</b>`);
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, card2Message.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD2_RESPONSE;
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD2_RESPONSE:
                session.card2Response = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ
                const analysisMessage = await bot.sendMessage(chatId, `üß† <b>–ü—Ä–æ–≤–æ–∂—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...</b>

üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–∑–¥–∞—é —Å–≤—è–∑–∫—É –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏...
‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...');
                const analysisData = await generatePsychologicalAnalysis(
                    session.card1Data, 
                    session.card2Data, 
                    session.card1Response, 
                    session.card2Response
                );
                session.psychologicalAnalysis = analysisData.analysis;
                session.recommendations = analysisData.recommendation;
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, analysisMessage.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                await bot.sendMessage(chatId, `üìä <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</b>

${analysisData.analysis}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
${analysisData.recommendation}`, { parse_mode: 'HTML' });
                
                session.state = DIALOG_STATES.WAITING_FOR_PSYCHOLOGICAL_ANALYSIS;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã
                const card3Message = await bot.sendMessage(chatId, `üåâ <b>–°–æ–∑–¥–∞—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...</b>

‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É...');
                await updateProgressMessage(chatId, card3Message.message_id, 
                    `üåâ <b>–°–æ–∑–¥–∞—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–∞—Ä—Ç–æ–π —Ä–µ—Å—É—Ä—Å–∞...`);
                
                const card3Data = await generateTransitionCard(
                    session.card1Data, 
                    session.card2Data, 
                    session.card1Response, 
                    session.card2Response
                );
                session.card3Data = card3Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ3:', card3Data);
                
                await updateProgressMessage(chatId, card3Message.message_id, 
                    `üåâ <b>–°–æ–∑–¥–∞—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–∞—Ä—Ç–æ–π —Ä–µ—Å—É—Ä—Å–∞...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –º–æ—Å—Ç–∞-–ø–µ—Ä–µ—Ö–æ–¥–∞...`);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ3...');
                const card3Image = await generateImage(card3Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ3:', card3Image);
                
                await updateProgressMessage(chatId, card3Message.message_id, 
                    `üåâ <b>–°–æ–∑–¥–∞—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–∞—Ä—Ç–æ–π —Ä–µ—Å—É—Ä—Å–∞...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –º–æ—Å—Ç–∞-–ø–µ—Ä–µ—Ö–æ–¥–∞...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É...`);
                
                await sendImageFromUrl(chatId, card3Image, 
                    `üúÇ <b>–ö–∞—Ä—Ç–∞ ‚Ññ3 ‚Äî –ü–µ—Ä–µ—Ö–æ–¥</b>

${card3Data.description}

${card3Data.symbols}

<b>–ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º –º–æ—Å—Ç–æ–º –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>`);
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, card3Message.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD3_RESPONSE;
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD3_RESPONSE:
                session.card3Response = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                const finalMessage = await bot.sendMessage(chatId, `‚ú® <b>–°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...</b>

üìã –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏...
‚è≥ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...`, { parse_mode: 'HTML' });
                
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, finalMessage.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                const summary = `–í–æ—Ç —Ç–≤–æ–π –ø—É—Ç—å üåå  

üúÉ <b>–ö–∞—Ä—Ç–∞ ‚Ññ1 ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> ${session.stateDescription}  
üúÅ <b>–ö–∞—Ä—Ç–∞ ‚Ññ2 ‚Äî –†–µ—Å—É—Ä—Å:</b> ${session.card2Data.description}  
üúÇ <b>–ö–∞—Ä—Ç–∞ ‚Ññ3 ‚Äî –ü–µ—Ä–µ—Ö–æ–¥:</b> ${session.card3Data.description}  

–ë–µ—Ä–µ–≥–∏ —Å–≤–æ–π —Ä–µ—Å—É—Ä—Å –∏ —à–∞–≥–∞–π –ø–æ –º–æ—Å—Ç—É.  
–•–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é üìÇ –∏–ª–∏ –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞ ‚ú®?`;
                
                await bot.sendMessage(chatId, summary, { parse_mode: 'HTML' });
                session.state = DIALOG_STATES.WAITING_FOR_MEANING_CARD;
                break;
                
            case DIALOG_STATES.WAITING_FOR_MEANING_CARD:
                if (text.toLowerCase().includes('—Å–º—ã—Å–ª') || text.toLowerCase().includes('—Å–º—ã—Å–ª–∞') || text.toLowerCase().includes('‚ú®')) {
                    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–º—ã—Å–ª–∞
                    const meaningMessage = await bot.sendMessage(chatId, `‚ú® <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞...</b>

üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–¥–∏ —á–µ–≥–æ —Å–µ–π—á–∞—Å –¥–≤–∏–∂–µ–Ω–∏–µ...
‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...`, { parse_mode: 'HTML' });
                    
                    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞...');
                    const meaningCardData = await generateMeaningCard(
                        session.card1Data, 
                        session.card2Data, 
                        session.card3Data, 
                        [session.card1Response, session.card2Response, session.card3Response]
                    );
                    session.meaningCardData = meaningCardData;
                    console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–º—ã—Å–ª–∞:', meaningCardData);
                    
                    await updateProgressMessage(chatId, meaningMessage.message_id, 
                        `‚ú® <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞...</b>

üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–¥–∏ —á–µ–≥–æ —Å–µ–π—á–∞—Å –¥–≤–∏–∂–µ–Ω–∏–µ...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ —Å–º—ã—Å–ª–∞...`);
                    
                    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã —Å–º—ã—Å–ª–∞...');
                    const meaningImage = await generateImage(meaningCardData.visualPrompt);
                    console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å–º—ã—Å–ª–∞:', meaningImage);
                    
                    await updateProgressMessage(chatId, meaningMessage.message_id, 
                        `‚ú® <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞...</b>

üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–¥–∏ —á–µ–≥–æ —Å–µ–π—á–∞—Å –¥–≤–∏–∂–µ–Ω–∏–µ...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ —Å–º—ã—Å–ª–∞...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç—É —Å–º—ã—Å–ª–∞...`);
                    
                    await sendImageFromUrl(chatId, meaningImage, 
                        `‚ú® <b>–ö–∞—Ä—Ç–∞ —Å–º—ã—Å–ª–∞</b>

${meaningCardData.description}

${meaningCardData.symbols}

<b>${meaningCardData.conclusion}</b>`);
                    
                    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                    try {
                        await bot.deleteMessage(chatId, meaningMessage.message_id);
                    } catch (error) {
                        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                    }
                    
                    session.state = DIALOG_STATES.COMPLETED;
                    
                    const finalSummary = `üéâ <b>–¢–≤–æ—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üúÉ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> ${session.stateDescription}  
üúÅ <b>–†–µ—Å—É—Ä—Å:</b> ${session.card2Data.description}  
üúÇ <b>–ü–µ—Ä–µ—Ö–æ–¥:</b> ${session.card3Data.description}  
‚ú® <b>–°–º—ã—Å–ª:</b> ${session.meaningCardData.description}

<b>–¢–≤–æ–∏ –æ—Ç–∫–ª–∏–∫–∏:</b>
‚Ä¢ –ù–∞ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É: "${session.card1Response}"
‚Ä¢ –ù–∞ –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É: "${session.card2Response}"
‚Ä¢ –ù–∞ —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É: "${session.card3Response}"

<b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>
${session.psychologicalAnalysis}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
${session.recommendations}

–≠—Ç–æ —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è. –ë–µ—Ä–µ–≥–∏ —Å–≤–æ–π —Ä–µ—Å—É—Ä—Å –∏ —à–∞–≥–∞–π –ø–æ –º–æ—Å—Ç—É. üôè

–ù–∞–ø–∏—à–∏ "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`;
                    
                    await bot.sendMessage(chatId, finalSummary, { parse_mode: 'HTML' });
                } else {
                    session.state = DIALOG_STATES.COMPLETED;
                    
                    const simpleSummary = `üéâ <b>–¢–≤–æ—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üúÉ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> ${session.stateDescription}  
üúÅ <b>–†–µ—Å—É—Ä—Å:</b> ${session.card2Data.description}  
üúÇ <b>–ü–µ—Ä–µ—Ö–æ–¥:</b> ${session.card3Data.description}  

<b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>
${session.psychologicalAnalysis}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
${session.recommendations}

–≠—Ç–æ —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è. –ë–µ—Ä–µ–≥–∏ —Å–≤–æ–π —Ä–µ—Å—É—Ä—Å –∏ —à–∞–≥–∞–π –ø–æ –º–æ—Å—Ç—É. üôè

–ù–∞–ø–∏—à–∏ "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`;
                    
                    await bot.sendMessage(chatId, simpleSummary, { parse_mode: 'HTML' });
                }
                break;
                
            case DIALOG_STATES.COMPLETED:
                if (text.toLowerCase().includes('–Ω–æ–≤–∞—è') || text.toLowerCase().includes('–µ—â–µ')) {
                    initUserSession(userId);
                    await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é. 

–û–ø–∏—à–∏ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º-–¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π.`);
                } else {
                    await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
                }
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    let cleaned = 0;
    
    for (const [userId, session] of userSessions.entries()) {
        if (session.lastActivity && (now - session.lastActivity) > 600000) { // 10 –º–∏–Ω—É—Ç
            userSessions.delete(userId);
            cleaned++;
        }
    }
    
    if (cleaned > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π`);
    }
}, 600000);

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(() => {
    const tempDir = path.join(__dirname, '..', 'temp');
    if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir);
        const now = Date.now();
        
        files.forEach(file => {
            const filePath = path.join(tempDir, file);
            const stats = fs.statSync(filePath);
            
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            if (now - stats.mtime.getTime() > 3600000) {
                fs.unlinkSync(filePath);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
            }
        });
    }
}, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ Telegram-–±–æ—Ç "–ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã" –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏!');
console.log('üîß –§—É–Ω–∫—Ü–∏–∏: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã, —É–ª—É—á—à–µ–Ω–Ω—ã–π UX, –∫–∞—Ä—Ç–∞ —Å–º—ã—Å–ª–∞');
console.log('üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã:');
console.log('   - TELEGRAM_BOT_TOKEN');
console.log('   - OPENAI_API_KEY');
