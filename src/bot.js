const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
const DIALOG_STATES = {
    IDLE: 'idle',
    WAITING_FOR_STATE_DESCRIPTION: 'waiting_for_state',
    WAITING_FOR_METAPHOR: 'waiting_for_metaphor',
    WAITING_FOR_CARD1_RESPONSE: 'waiting_for_card1',
    WAITING_FOR_CARD2_RESPONSE: 'waiting_for_card2',
    COMPLETED: 'completed'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserSession(userId) {
    userSessions.set(userId, {
        state: DIALOG_STATES.IDLE,
        stateDescription: '',
        metaphor: '',
        card1Data: null,
        card2Data: null,
        card1Response: '',
        card2Response: ''
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserSession(userId) {
    if (!userSessions.has(userId)) {
        initUserSession(userId);
    }
    return userSessions.get(userId);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
async function generateText(prompt, maxTokens = 500) {
    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4",
            messages: [
                {
                    role: "system",
                    content: "–¢—ã - –º—É–¥—Ä—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π –∏ –æ–±—Ä–∞–∑–Ω—ã–π —è–∑—ã–∫."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            max_tokens: maxTokens,
            temperature: 0.8
        });
        
        return completion.choices[0].message.content;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
async function generateImage(prompt) {
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ DALL-E —Å –ø—Ä–æ–º–ø—Ç–æ–º:', prompt);
        const response = await openai.images.generate({
            model: "dall-e-3",
            prompt: prompt,
            size: "1024x1024",
            quality: "standard",
            n: 1
        });
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DALL-E:', response.data[0]);
        return response.data[0].url;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function generateStateCard(stateDescription, metaphor) {
    const prompt = `–°–æ–∑–¥–∞–π –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞. 
    
–°–æ—Å—Ç–æ—è–Ω–∏–µ: "${stateDescription}"
–ú–µ—Ç–∞—Ñ–æ—Ä–∞: "${metaphor}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
3. –°–∏–º–≤–æ–ª—ã –∏ –æ–±—Ä–∞–∑—ã, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]
INTERPRETATION: [–∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=INTERPRETATION:|$)/s);
    const interpretationMatch = response.match(/INTERPRETATION:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal card representing ${stateDescription} in ${metaphor}`,
        interpretation: interpretationMatch ? interpretationMatch[1].trim() : response
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–µ—Å—É—Ä—Å–∞
async function generateResourceCard(stateDescription, metaphor) {
    const prompt = `–°–æ–∑–¥–∞–π –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    
–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "${stateDescription}"
–ú–µ—Ç–∞—Ñ–æ—Ä–∞: "${metaphor}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª —Ä–µ—Å—É—Ä—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
3. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ç–æ–≥–æ, –∫–∞–∫ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –ø–æ–º–æ–∂–µ—Ç

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]
INTERPRETATION: [–∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–∞]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=INTERPRETATION:|$)/s);
    const interpretationMatch = response.match(/INTERPRETATION:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal resource card for transition from ${stateDescription}`,
        interpretation: interpretationMatch ? interpretationMatch[1].trim() : response
    };
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function sendImageFromUrl(chatId, imageUrl, caption) {
    try {
        console.log('–°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL:', imageUrl);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const response = await axios({
            method: 'GET',
            url: imageUrl,
            responseType: 'stream'
        });
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const tempPath = path.join(__dirname, '..', 'temp', `image_${Date.now()}.png`);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const tempDir = path.dirname(tempPath);
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const writer = fs.createWriteStream(tempPath);
        response.data.pipe(writer);
        
        return new Promise((resolve, reject) => {
            writer.on('finish', async () => {
                try {
                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram...');
                    await bot.sendPhoto(chatId, tempPath, { 
                        caption: caption, 
                        parse_mode: 'HTML' 
                    });
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    fs.unlinkSync(tempPath);
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                    resolve();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if (fs.existsSync(tempPath)) {
                        fs.unlinkSync(tempPath);
                    }
                    reject(error);
                }
            });
            
            writer.on('error', (error) => {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                reject(error);
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await bot.sendMessage(chatId, `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n\n${caption}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    initUserSession(userId);
    
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç üëã 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –∏ –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ã—Ö–æ–¥–∞. 

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—é? ‚ú®

–ù–∞–ø–∏—à–∏ "–î–∞" –∏–ª–∏ "–ù–∞—á–∞—Ç—å" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`;
    
    await bot.sendMessage(chatId, welcomeMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    
    if (!text || text.startsWith('/')) return;
    
    const session = getUserSession(userId);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.state}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    
    try {
        switch (session.state) {
            case DIALOG_STATES.IDLE:
                if (text.toLowerCase().includes('–¥–∞') || text.toLowerCase().includes('–Ω–∞—á–∞—Ç—å')) {
                    session.state = DIALOG_STATES.WAITING_FOR_STATE_DESCRIPTION;
                    await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! üåü

–û–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º-–¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π. 

–ù–∞–ø—Ä–∏–º–µ—Ä: "—è –ø–æ—Ç–µ—Ä—è–ª –ø—É—Ç—å", "–ø—É—Å—Ç–æ—Ç–∞", "—Ç—Ä–µ–≤–æ–≥–∞", "–∑–∞—Å—Ç—Ä—è–ª"`);
                } else {
                    await bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ "–î–∞" –∏–ª–∏ "–ù–∞—á–∞—Ç—å" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–∞–º–∏.`);
                }
                break;
                
            case DIALOG_STATES.WAITING_FOR_STATE_DESCRIPTION:
                session.stateDescription = text;
                session.state = DIALOG_STATES.WAITING_FOR_METAPHOR;
                
                await bot.sendMessage(chatId, `–ü–æ–Ω—è–ª, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å "${text}". 

–ï—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –º–µ—Å—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω—É ‚Äî —á—Ç–æ —ç—Ç–æ –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å? 

–õ–µ—Å, –ø—É—Å—Ç—ã–Ω—è, –º–æ—Ä–µ, —Ç—É–º–∞–Ω, –≥–æ—Ä—ã, –¥–æ–∂–¥—å? –û–ø–∏—à–∏ –æ–±—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É.`);
                break;
                
            case DIALOG_STATES.WAITING_FOR_METAPHOR:
                session.metaphor = text;
                
                await bot.sendMessage(chatId, `–°–æ–∑–¥–∞—é —Ç–≤–æ–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã... üîÆ

–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.`);
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É...');
                const card1Data = await generateStateCard(session.stateDescription, session.metaphor);
                session.card1Data = card1Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ1:', card1Data);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ1...');
                const card1Image = await generateImage(card1Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ1:', card1Image);
                
                await sendImageFromUrl(chatId, card1Image, 
                    `üúÉ <b>–ö–∞—Ä—Ç–∞ ‚Ññ1 ‚Äî –¢–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ</b>\n\n${card1Data.interpretation}`);
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD1_RESPONSE;
                
                await bot.sendMessage(chatId, `–ß—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Ç–µ–±–µ —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ? 
–û–ø–∏—à–∏ —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –æ—Ç —É–≤–∏–¥–µ–Ω–Ω–æ–≥–æ.`);
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD1_RESPONSE:
                session.card1Response = text;
                
                await bot.sendMessage(chatId, `–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É ‚Äî —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞... üå±`);
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É...');
                const card2Data = await generateResourceCard(session.stateDescription, session.metaphor);
                session.card2Data = card2Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ2:', card2Data);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ2...');
                const card2Image = await generateImage(card2Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ2:', card2Image);
                
                await sendImageFromUrl(chatId, card2Image, 
                    `üúÅ <b>–ö–∞—Ä—Ç–∞ ‚Ññ2 ‚Äî –¢–≤–æ–π —Ä–µ—Å—É—Ä—Å</b>\n\n${card2Data.interpretation}`);
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD2_RESPONSE;
                
                await bot.sendMessage(chatId, `–ö–∞–∫ –¥—É–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è?`);
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD2_RESPONSE:
                session.card2Response = text;
                session.state = DIALOG_STATES.COMPLETED;
                
                const summary = `‚ú® <b>–¢–≤–æ–π –ø—É—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω</b>

üúÉ <b>–ö–∞—Ä—Ç–∞ ‚Ññ1 ‚Äî –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å:</b> ${session.stateDescription}
üúÅ <b>–ö–∞—Ä—Ç–∞ ‚Ññ2 ‚Äî —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç:</b> ${session.card2Data.interpretation}

–¢–≤–æ–∏ –æ—Ç–∫–ª–∏–∫–∏:
‚Ä¢ –ù–∞ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É: "${session.card1Response}"
‚Ä¢ –ù–∞ –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É: "${session.card2Response}"

–¢—ã –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –∫–∞—Ä—Ç—ã –≤ —Å–≤–æ—é –ª–∏—á–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é üìÇ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏.

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üôè`;
                
                await bot.sendMessage(chatId, summary);
                break;
                
            case DIALOG_STATES.COMPLETED:
                if (text.toLowerCase().includes('–Ω–æ–≤–∞—è') || text.toLowerCase().includes('–µ—â–µ')) {
                    initUserSession(userId);
                    await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é. 

–û–ø–∏—à–∏ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º-–¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π.`);
                } else {
                    await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
                }
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ Telegram-–±–æ—Ç "–ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã" –∑–∞–ø—É—â–µ–Ω!');
console.log('üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã:');
console.log('   - TELEGRAM_BOT_TOKEN');
console.log('   - OPENAI_API_KEY');
