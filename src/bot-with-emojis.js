const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

const bot = new TelegramBot(token, { 
    polling: {
        interval: 1000,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
const DIALOG_STATES = {
    IDLE: 'idle',
    WAITING_FOR_STATE_DESCRIPTION: 'waiting_for_state',
    WAITING_FOR_CARD1_RESPONSE: 'waiting_for_card1',
    WAITING_FOR_CARD2_RESPONSE: 'waiting_for_card2',
    WAITING_FOR_CARD3_RESPONSE: 'waiting_for_card3',
    COMPLETED: 'completed'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ –ª–∏–º–∏—Ç–∞ Telegram (1024 —Å–∏–º–≤–æ–ª–∞)
function truncateCaption(text, maxLength = 1000) {
    if (text.length <= maxLength) return text;
    
    const truncated = text.substring(0, maxLength);
    const lastParagraph = truncated.lastIndexOf('\n\n');
    
    if (lastParagraph > maxLength * 0.7) {
        return truncated.substring(0, lastParagraph) + '\n\n...';
    }
    
    return truncated + '...';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
async function sendTyping(chatId) {
    try {
        await bot.sendChatAction(chatId, 'typing');
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
async function sendProgressMessage(chatId, message, delay = 1000) {
    await sendTyping(chatId);
    await new Promise(resolve => setTimeout(resolve, delay));
    return await bot.sendMessage(chatId, message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
async function updateProgressMessage(chatId, messageId, newText) {
    try {
        await bot.editMessageText(newText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML'
        });
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ');
        return await bot.sendMessage(chatId, newText, { parse_mode: 'HTML' });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserSession(userId) {
    userSessions.set(userId, {
        state: DIALOG_STATES.IDLE,
        stateDescription: '',
        card1Data: null,
        card2Data: null,
        card3Data: null,
        card1Response: '',
        card2Response: '',
        card3Response: '',
        lastActivity: Date.now()
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserSession(userId) {
    if (!userSessions.has(userId)) {
        initUserSession(userId);
    }
    return userSessions.get(userId);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI —Å GPT-4.1 –∏ —Ä–µ–¥–∞–∫—Ç—É—Ä–æ–π –ø–æ –ú–∞–∫—Å–∏–º—É –ò–ª—å—è—Ö–æ–≤—É
async function generateText(prompt, maxTokens = 500) {
    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4.1",
            messages: [
                {
                    role: "system",
                    content: `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –∞—Ä—Ö–µ—Ç–∏–ø–∞–º–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫.

–ü–†–ê–í–ò–õ–ê –†–ï–î–ê–ö–¢–£–†–´ –ü–û –ú–ê–ö–°–ò–ú–£ –ò–õ–¨–Ø–•–û–í–£:
- –ü–∏—à–∏ —è—Å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
- –ò–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤ –∏ —à—Ç–∞–º–ø–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ, –±–µ–∑ –≤–æ–¥—ã
- –û–¥–∏–Ω –∞–±–∑–∞—Ü = –æ–¥–Ω–∞ –º—ã—Å–ª—å
- –ò–∑–±–µ–≥–∞–π —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤: "—è–≤–ª—è–µ—Ç—Å—è", "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è", "–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"
- –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤–º–µ—Å—Ç–æ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ`
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            max_tokens: maxTokens,
            temperature: 0.8
        });
        
        return completion.choices[0].message.content;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
async function generateImage(prompt) {
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ DALL-E —Å –ø—Ä–æ–º–ø—Ç–æ–º:', prompt);
        const response = await openai.images.generate({
            model: "dall-e-3",
            prompt: prompt,
            size: "1024x1024",
            quality: "standard",
            n: 1
        });
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DALL-E:', response.data[0]);
        return response.data[0].url;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
async function generateStateCard(stateDescription) {
    const prompt = `–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –∞—Ä—Ö–µ—Ç–∏–ø–∞–º–∏.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Å–ª–æ–≤—É/—Ñ—Ä–∞–∑–µ.

–°–æ—Å—Ç–æ—è–Ω–∏–µ: "${stateDescription}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏) —Å 1-3 —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—Ä–∞–∑–∞
3. –°–∏–º–≤–æ–ª—ã (2 –ø—É–Ω–∫—Ç–∞: –æ–±—ä–µ–∫—Ç ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ) —Å —ç–º–æ–¥–∑–∏

–í–ê–ñ–ù–û: –ü–∏—à–∏ —è—Å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –ë—É–¥—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ —Ç–∞–º, –≥–¥–µ –≤–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞–∑ –∏ —ç–º–æ—Ü–∏—é.

–î–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Å—Ç–∏–ª—å:
"A traditional oil painting on canvas, archetypal and metaphorical illustration. A symbolic scene in a foggy, mystical landscape with muted earthy colors. Visible brushstrokes, textured canvas. Composition emphasizes solitude, inner transformation, and psychological depth. The image should look like a future tarot-style card, with a central symbolic object. The atmosphere is calm, contemplative, slightly surreal, evoking a sense of inner journey."

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã: –æ–±—ä–µ–∫—Ç ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal card representing ${stateDescription}`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üå´Ô∏è –¢—É–º–∞–Ω ‚Üí –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å\nüíî –¢—Ä–µ—â–∏–Ω—ã ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∞–Ω—ã'
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–µ—Å—É—Ä—Å–∞ (–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
async function generateResourceCard(stateDescription, card1Response) {
    const prompt = `–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç—É-—Ä–µ—Å—É—Ä—Å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "${stateDescription}"
–û—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è: "${card1Response}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å 1-3 —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—Ä–∞–∑–∞
3. –°–∏–º–≤–æ–ª—ã (2 –ø—É–Ω–∫—Ç–∞: –æ–±—ä–µ–∫—Ç ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ) —Å —ç–º–æ–¥–∑–∏

–í–ê–ñ–ù–û: –ü–∏—à–∏ —è—Å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –ë—É–¥—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ —Ç–∞–º, –≥–¥–µ –≤–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞–∑ –∏ —ç–º–æ—Ü–∏—é.

–î–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Å—Ç–∏–ª—å:
"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è:  
‚Äî —Ñ–∏–≥—É—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –∫–∞–º–ø–∞–∑—Ü–∏–∏,  
‚Äî —Ñ–æ–Ω –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –∏ —Å–ª–µ–≥–∫–∞ —Ä–∞–∑–º—ã—Ç—ã–π (–ª–µ—Å, –º–æ—Ä–µ, –∑–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ, —Ö—Ä–∞–º, –∂–∏–ª–∏—â–µ),  
‚Äî –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏  –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ,  
‚Äî –∫–æ–Ω—Ç—É—Ä—ã  –æ–±—Ä–∞–∑–Ω—ã–µ, –Ω–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ.  

–°–º—ã—Å–ª:  
‚Äî –≤—Å—è —Å—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–∏—Ñ–∏—á–µ—Å–∫–∏–π –∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª,  
‚Äî –∞—Ä—Ö–µ—Ç–∏–ø 
‚Äî –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∞—è, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–∏–º–≤–æ–ª–∞–º–∏, –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º–∞—è –∑–∞ —Å–µ–∫—É–Ω–¥—É, —Å –±–∞–ª–∞–Ω—Å–æ–º –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –≥–ª—É–±–∏–Ω—ã. 

–°—Ç–∏–ª—å: A traditional oil painting on canvas, archetypal and metaphorical illustration. A symbolic scene in a foggy, mystical landscape with muted earthy colors (grays, browns, pale greens). Visible brushstrokes, textured canvas. Composition emphasizes solitude, inner transformation, and psychological depth. The image should look like a tarot-style card, with a central symbolic object. The atmosphere is calm, contemplative, slightly surreal, evoking a sense of inner journey."

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã: –æ–±—ä–µ–∫—Ç ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]`;

    const response = await generateText(prompt);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal resource card for transition from ${stateDescription}`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üå± –†–æ—Å—Ç–æ–∫ ‚Üí –Ω–∞–¥–µ–∂–¥–∞ –∏ —Ä–æ—Å—Ç\nüíé –ö—Ä–∏—Å—Ç–∞–ª–ª ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞'
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ + –∏—Ç–æ–≥ (–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
async function generateTransitionCard(card1Data, card2Data, card1Response, card2Response) {
    const prompt = `–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –∞—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫–∞—Ä—Ç–∞ 1) –∫ —Ä–µ—Å—É—Ä—Å—É (–∫–∞—Ä—Ç–∞ 2).
–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏—Ç–æ–≥ –∏ –¥–∞–π 1 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.

–ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${card1Data.description}
–û—Ç–∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è: "${card1Response}"

–ö–∞—Ä—Ç–∞ —Ä–µ—Å—É—Ä—Å–∞: ${card2Data.description}
–û—Ç–∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å–∞: "${card2Response}"

–°–æ–∑–¥–∞–π:
1. –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –¥–ª—è DALL-E)
2. –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å 1-3 —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—Ä–∞–∑–∞
3. –°–∏–º–≤–æ–ª—ã (2 –ø—É–Ω–∫—Ç–∞: –æ–±—ä–µ–∫—Ç ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ) —Å —ç–º–æ–¥–∑–∏
4. –ò—Ç–æ–≥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–º—ã—Å–ª–∞–º–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å —ç–º–æ–¥–∑–∏
5. –û–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏

–í–ê–ñ–ù–û: –ü–∏—à–∏ —è—Å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –ë—É–¥—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ —Ç–∞–º, –≥–¥–µ –≤–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞–∑ –∏ —ç–º–æ—Ü–∏—é.

–î–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Å—Ç–∏–ª—å:
"A traditional oil painting on canvas, archetypal and metaphorical illustration. A symbolic scene in a foggy, mystical landscape with muted earthy colors (grays, browns, pale greens). Visible brushstrokes, textured canvas. Composition emphasizes solitude, inner transformation, and psychological depth. The image should look like a tarot-style card, with a central symbolic object. The atmosphere is calm, contemplative, slightly surreal, evoking a sense of inner journey."

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
VISUAL: [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏]
SYMBOLS: [—Å–∏–º–≤–æ–ª—ã: –æ–±—ä–µ–∫—Ç ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏]
SUMMARY: [–∏—Ç–æ–≥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–º—ã—Å–ª–∞–º–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å —ç–º–æ–¥–∑–∏]
PRACTICE: [–æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏]`;

    const response = await generateText(prompt, 800);
    
    const visualMatch = response.match(/VISUAL:\s*(.+?)(?=DESCRIPTION:|$)/s);
    const descriptionMatch = response.match(/DESCRIPTION:\s*(.+?)(?=SYMBOLS:|$)/s);
    const symbolsMatch = response.match(/SYMBOLS:\s*(.+?)(?=SUMMARY:|$)/s);
    const summaryMatch = response.match(/SUMMARY:\s*(.+?)(?=PRACTICE:|$)/s);
    const practiceMatch = response.match(/PRACTICE:\s*(.+?)$/s);
    
    return {
        visualPrompt: visualMatch ? visualMatch[1].trim() : `Archetypal transition card bridging two states`,
        description: descriptionMatch ? descriptionMatch[1].trim() : response,
        symbols: symbolsMatch ? symbolsMatch[1].trim() : 'üåâ –ú–æ—Å—Ç ‚Üí —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏\nüïØÔ∏è –°–≤–µ—Ç ‚Üí –æ—Å–≤–µ—â–µ–Ω–∏–µ –ø—É—Ç–∏',
        summary: summaryMatch ? summaryMatch[1].trim() : '–ö–ª—é—á–µ–≤—ã–µ —Å–º—ã—Å–ª—ã –∫–∞—Ä—Ç',
        practice: practiceMatch ? practiceMatch[1].trim() : '–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –≤—ã–¥–æ—Ö'
    };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
async function sendImageFromUrl(chatId, imageUrl, caption) {
    try {
        console.log('–°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL:', imageUrl);
        
        const response = await axios({
            method: 'GET',
            url: imageUrl,
            responseType: 'stream',
            timeout: 30000
        });
        
        const tempPath = path.join(__dirname, '..', 'temp', `image_${Date.now()}.png`);
        const tempDir = path.dirname(tempPath);
        
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir, { recursive: true });
        }
        
        const writer = fs.createWriteStream(tempPath);
        response.data.pipe(writer);
        
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('Timeout –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
            }, 30000);
            
            writer.on('finish', async () => {
                clearTimeout(timeout);
                try {
                    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram...');
                    
                    const shortCaption = truncateCaption(caption);
                    
                    await bot.sendPhoto(chatId, tempPath, { 
                        caption: shortCaption, 
                        parse_mode: 'HTML' 
                    });
                    
                    if (shortCaption !== caption) {
                        await bot.sendMessage(chatId, `üìù –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n\n${caption}`, {
                            parse_mode: 'HTML'
                        });
                    }
                    
                    fs.unlinkSync(tempPath);
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                    resolve();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    if (fs.existsSync(tempPath)) {
                        fs.unlinkSync(tempPath);
                    }
                    reject(error);
                }
            });
            
            writer.on('error', (error) => {
                clearTimeout(timeout);
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                reject(error);
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n\n${caption}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é`);
    
    initUserSession(userId);
    
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç üëã  
–Ø —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.  

–° –ø–æ–º–æ—â—å—é –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç –º—ã –≤–º–µ—Å—Ç–µ —É–≤–∏–¥–∏–º, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è, –∏ –Ω–∞–π–¥—ë–º —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä—ë–¥.  

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? ‚ú®  
–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —Ñ—Ä–∞–∑–æ–π, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.`;
    
    await bot.sendMessage(chatId, welcomeMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    
    if (!text || text.startsWith('/')) return;
    
    const session = getUserSession(userId);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.state}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    
    try {
        switch (session.state) {
            case DIALOG_STATES.IDLE:
                session.stateDescription = text;
                session.state = DIALOG_STATES.WAITING_FOR_CARD1_RESPONSE;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã
                const initialMessage = await bot.sendMessage(chatId, `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ—é –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...</b>

–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É...');
                await updateProgressMessage(chatId, initialMessage.message_id, 
                    `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ—é –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${session.stateDescription}"...`);
                
                const card1Data = await generateStateCard(session.stateDescription);
                session.card1Data = card1Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ1:', card1Data);
                
                await updateProgressMessage(chatId, initialMessage.message_id, 
                    `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ—é –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${session.stateDescription}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑...`);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ1...');
                const card1Image = await generateImage(card1Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ1:', card1Image);
                
                await updateProgressMessage(chatId, initialMessage.message_id, 
                    `üîÆ <b>–°–æ–∑–¥–∞—é —Ç–≤–æ—é –∫–∞—Ä—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${session.stateDescription}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç—É...`);
                
                await sendImageFromUrl(chatId, card1Image, 
                    `üúÉ <b>–ö–∞—Ä—Ç–∞ ‚Ññ1 ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ</b>

${card1Data.description}

${card1Data.symbols}

<b>–ß—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å?</b>`);
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, initialMessage.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD1_RESPONSE:
                session.card1Response = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
                const card2Message = await bot.sendMessage(chatId, `üå± <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å–∞...</b>

‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—Ç–æ—Ä—É—é –∫–∞—Ä—Ç—É...');
                await updateProgressMessage(chatId, card2Message.message_id, 
                    `üå± <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "${session.stateDescription}"...`);
                
                const card2Data = await generateResourceCard(session.stateDescription, session.card1Response);
                session.card2Data = card2Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ2:', card2Data);
                
                await updateProgressMessage(chatId, card2Message.message_id, 
                    `üå± <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "${session.stateDescription}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑...`);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ2...');
                const card2Image = await generateImage(card2Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ2:', card2Image);
                
                await updateProgressMessage(chatId, card2Message.message_id, 
                    `üå± <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ "${session.stateDescription}"...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç—É...`);
                
                await sendImageFromUrl(chatId, card2Image, 
                    `üúÅ <b>–ö–∞—Ä—Ç–∞ ‚Ññ2 ‚Äî –†–µ—Å—É—Ä—Å</b>

${card2Data.description}

${card2Data.symbols}

<b>–ß—Ç–æ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>`);
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, card2Message.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD2_RESPONSE;
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD2_RESPONSE:
                session.card2Response = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã
                const card3Message = await bot.sendMessage(chatId, `üåâ <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏...`, { parse_mode: 'HTML' });
                
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ—Ç—å—é –∫–∞—Ä—Ç—É...');
                await updateProgressMessage(chatId, card3Message.message_id, 
                    `üåâ <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏...`);
                
                const card3Data = await generateTransitionCard(
                    session.card1Data, 
                    session.card2Data, 
                    session.card1Response, 
                    session.card2Response
                );
                session.card3Data = card3Data;
                console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ‚Ññ3:', card3Data);
                
                await updateProgressMessage(chatId, card3Message.message_id, 
                    `üåâ <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑...`);
                
                console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ‚Ññ3...');
                const card3Image = await generateImage(card3Data.visualPrompt);
                console.log('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ‚Ññ3:', card3Image);
                
                await updateProgressMessage(chatId, card3Message.message_id, 
                    `üåâ <b>–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞...</b>

üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏...
üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑...
üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç—É...`);
                
                await sendImageFromUrl(chatId, card3Image, 
                    `üúÇ <b>–ö–∞—Ä—Ç–∞ ‚Ññ3 ‚Äî –ü–µ—Ä–µ—Ö–æ–¥</b>

${card3Data.description}

${card3Data.symbols}

<b>–ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º –º–æ—Å—Ç–æ–º –¥–ª—è —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>`);
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, card3Message.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                session.state = DIALOG_STATES.WAITING_FOR_CARD3_RESPONSE;
                break;
                
            case DIALOG_STATES.WAITING_FOR_CARD3_RESPONSE:
                session.card3Response = text;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
                const finalMessage = await bot.sendMessage(chatId, `‚ú® <b>–°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...</b>

üìã –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏...
‚è≥ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...`, { parse_mode: 'HTML' });
                
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await bot.deleteMessage(chatId, finalMessage.message_id);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                const summary = `‚ú® <b>–ò—Ç–æ–≥:</b>

üúÉ <b>–ö–∞—Ä—Ç–∞ ‚Ññ1 ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> ${session.card1Data.description}  
üúÅ <b>–ö–∞—Ä—Ç–∞ ‚Ññ2 ‚Äî –†–µ—Å—É—Ä—Å:</b> ${session.card2Data.description}  
üúÇ <b>–ö–∞—Ä—Ç–∞ ‚Ññ3 ‚Äî –ü–µ—Ä–µ—Ö–æ–¥:</b> ${session.card3Data.description}  

${session.card3Data.summary}

<b>–ü—Ä–∞–∫—Ç–∏–∫–∞:</b> ${session.card3Data.practice}

–ë–µ—Ä–µ–≥–∏ —Å–µ–±—è. –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –Ω—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ —Ä—è–¥–æ–º ‚Äî –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É.`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                const keyboard = {
                    inline_keyboard: [
                        [
                            { text: 'üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', callback_data: 'new_session' }
                        ]
                    ]
                };
                
                await bot.sendMessage(chatId, summary, { parse_mode: 'HTML', reply_markup: keyboard });
                session.state = DIALOG_STATES.COMPLETED;
                break;
                
            case DIALOG_STATES.COMPLETED:
                if (text.toLowerCase().includes('–Ω–æ–≤–∞—è') || text.toLowerCase().includes('–µ—â–µ') || text.toLowerCase().includes('–≥–æ—Ç–æ–≤')) {
                    initUserSession(userId);
                    await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é. 

–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —Ñ—Ä–∞–∑–æ–π, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.`);
                } else {
                    await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ "–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞" –∏–ª–∏ "–≥–æ—Ç–æ–≤" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
                }
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${data}`);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const session = getUserSession(userId);
    
    try {
        if (data === 'new_session') {
            initUserSession(userId);
            await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é. 

–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —Ñ—Ä–∞–∑–æ–π, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    let cleaned = 0;
    
    for (const [userId, session] of userSessions.entries()) {
        if (session.lastActivity && (now - session.lastActivity) > 600000) { // 10 –º–∏–Ω—É—Ç
            userSessions.delete(userId);
            cleaned++;
        }
    }
    
    if (cleaned > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π`);
    }
}, 600000);

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
setInterval(() => {
    const tempDir = path.join(__dirname, '..', 'temp');
    if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir);
        const now = Date.now();
        
        files.forEach(file => {
            const filePath = path.join(tempDir, file);
            const stats = fs.statSync(filePath);
            
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            if (now - stats.mtime.getTime() > 3600000) {
                fs.unlinkSync(filePath);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
            }
        });
    }
}, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ Telegram-–±–æ—Ç "–ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã" –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º!');
console.log('üîß –§—É–Ω–∫—Ü–∏–∏: GPT-4.1, –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ–¥–∞–∫—Ç—É—Ä—ã –ú–∞–∫—Å–∏–º–∞ –ò–ª—å—è—Ö–æ–≤–∞, —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, inline-–∫–Ω–æ–ø–∫–∏');
console.log('üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã:');
console.log('   - TELEGRAM_BOT_TOKEN');
console.log('   - OPENAI_API_KEY');
