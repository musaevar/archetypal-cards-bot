#!/usr/bin/env node

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
 */

const os = require('os');
const fs = require('fs');
const path = require('path');

class BotMonitor {
    constructor() {
        this.startTime = Date.now();
        this.metrics = {
            requests: 0,
            errors: 0,
            imagesGenerated: 0,
            sessionsActive: 0,
            memoryUsage: 0,
            cpuUsage: 0
        };
        
        this.startMonitoring();
    }
    
    startMonitoring() {
        console.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        setInterval(() => {
            this.collectMetrics();
            this.displayMetrics();
            this.checkAlerts();
        }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.generateReport();
        }, 300000);
    }
    
    collectMetrics() {
        const memUsage = process.memoryUsage();
        const cpuUsage = process.cpuUsage();
        
        this.metrics = {
            ...this.metrics,
            memoryUsage: Math.round(memUsage.heapUsed / 1024 / 1024), // MB
            cpuUsage: Math.round(cpuUsage.user / 1000000), // seconds
            uptime: Math.round((Date.now() - this.startTime) / 1000),
            loadAverage: os.loadavg()[0],
            freeMemory: Math.round(os.freemem() / 1024 / 1024), // MB
            totalMemory: Math.round(os.totalmem() / 1024 / 1024) // MB
        };
    }
    
    displayMetrics() {
        const { memoryUsage, cpuUsage, uptime, loadAverage, freeMemory, totalMemory } = this.metrics;
        
        console.log(`
üìä === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(uptime / 60)}–º ${uptime % 60}—Å
üíæ –ü–∞–º—è—Ç—å: ${memoryUsage}MB / ${totalMemory}MB (${Math.round(memoryUsage/totalMemory*100)}%)
üñ•Ô∏è  CPU: ${cpuUsage}—Å, Load: ${loadAverage.toFixed(2)}
üÜì –°–≤–æ–±–æ–¥–Ω–æ –ø–∞–º—è—Ç–∏: ${freeMemory}MB
üìà –ó–∞–ø—Ä–æ—Å–æ–≤: ${this.metrics.requests}, –û—à–∏–±–æ–∫: ${this.metrics.errors}
üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${this.metrics.imagesGenerated}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${this.metrics.sessionsActive}
        `);
    }
    
    checkAlerts() {
        const { memoryUsage, totalMemory, loadAverage } = this.metrics;
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∞–º—è—Ç–∏
        if (memoryUsage / totalMemory > 0.8) {
            console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!');
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ
        if (loadAverage > os.cpus().length) {
            console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É!');
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏
        if (this.metrics.freeMemory < 100) {
            console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏!');
        }
    }
    
    generateReport() {
        const report = {
            timestamp: new Date().toISOString(),
            uptime: this.metrics.uptime,
            memory: {
                used: this.metrics.memoryUsage,
                free: this.metrics.freeMemory,
                total: this.metrics.totalMemory,
                percentage: Math.round(this.metrics.memoryUsage/this.metrics.totalMemory*100)
            },
            performance: {
                requests: this.metrics.requests,
                errors: this.metrics.errors,
                errorRate: this.metrics.requests > 0 ? Math.round(this.metrics.errors/this.metrics.requests*100) : 0,
                imagesGenerated: this.metrics.imagesGenerated,
                sessionsActive: this.metrics.sessionsActive
            },
            system: {
                loadAverage: this.metrics.loadAverage,
                cpuCores: os.cpus().length,
                platform: os.platform(),
                nodeVersion: process.version
            }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        const reportPath = path.join(__dirname, 'reports', `report_${Date.now()}.json`);
        const reportsDir = path.dirname(reportPath);
        
        if (!fs.existsSync(reportsDir)) {
            fs.mkdirSync(reportsDir, { recursive: true });
        }
        
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        console.log(`üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        this.cleanupOldReports(reportsDir);
    }
    
    cleanupOldReports(reportsDir) {
        try {
            const files = fs.readdirSync(reportsDir);
            const weekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
            
            files.forEach(file => {
                const filePath = path.join(reportsDir, file);
                const stats = fs.statSync(filePath);
                
                if (stats.mtime.getTime() < weekAgo) {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç: ${file}`);
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    incrementRequests() {
        this.metrics.requests++;
    }
    
    incrementErrors() {
        this.metrics.errors++;
    }
    
    incrementImages() {
        this.metrics.imagesGenerated++;
    }
    
    updateSessions(count) {
        this.metrics.sessionsActive = count;
    }
}

module.exports = BotMonitor;
